pub fn subject() -> String {
    const N: &'static str = "\
    73167176531330624919225119674426574742355349194934\
    96983520312774506326239578318016984801869478851843\
    85861560789112949495459501737958331952853208805511\
    12540698747158523863050715693290963295227443043557\
    66896648950445244523161731856403098711121722383113\
    62229893423380308135336276614282806444486645238749\
    30358907296290491560440772390713810515859307960866\
    70172427121883998797908792274921901699720888093776\
    65727333001053367881220235421809751254540594752243\
    52584907711670556013604839586446706324415722155397\
    53697817977846174064955149290862569321978468622482\
    83972241375657056057490261407972968652414535100474\
    82166370484403199890008895243450658541227588666881\
    16427171479924442928230863465674813919123162824586\
    17866458359124566529476545682848912883142607690042\
    24219022671055626321111109370544217506941658960408\
    07198403850962455444362981230987879927244284909188\
    84580156166097919133875499200524063689912560717606\
    05886116467109405077541002256983155200055935729725\
    71636269561882670428252483600823257530420752963450\
    ";
    solve(N, 13).to_string()
}

fn solve(num: &str, consecutive: usize) -> u64 {
    assert!(num.len() >= consecutive);
    let digits = num.chars().map(|c| (c as u64 - 48)).collect::<Vec<_>>();
    let (mut prod, mut zeros) = digits[..consecutive]
        .iter()
        .fold((1, 0), |(prod, zeros), &d| {
            if d == 0 {
                (prod, zeros + 1)
            } else {
                (prod * d, zeros)
            }
        });
    let mut res = if zeros > 0 { 0 } else { prod };
    for i in consecutive..num.len() {
        let old = digits[i - consecutive];
        let new = digits[i];
        if old == 0 {
            zeros -= 1;
        } else {
            prod /= old;
        }
        if new == 0 {
            zeros += 1;
        } else {
            prod *= new;
        }
        if zeros == 0 && prod > res {
            res = prod;
        }
    }
    res
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_subject() {
        assert_eq!(subject(), "23514624000");
    }

    #[test]
    fn test_without_zero() {
        assert_eq!(solve("3141592", 1), 9);
        assert_eq!(solve("3141592", 2), 45);
        assert_eq!(solve("3141592", 3), 90);
        assert_eq!(solve("3141592", 4), 180);
        assert_eq!(solve("3141592", 5), 360);
        assert_eq!(solve("3141592", 6), 540);
        assert_eq!(solve("3141592", 7), 1080);
    }

    #[test]
    fn test_with_zero() {
        assert_eq!(solve("111011101110111", 4), 0);
        assert_eq!(solve("9092", 3), 0);
        assert_eq!(solve("90924023450", 3), 72);
        assert_eq!(solve("90924023450", 4), 120);
    }
}
